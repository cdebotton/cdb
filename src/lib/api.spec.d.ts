/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/accounts/register": {
    post: operations["register"];
  };
  "/auth/authorize": {
    post: operations["authorize"];
  };
  "/auth/revalidate": {
    post: operations["revalidate"];
  };
  "/users": {
    get: operations["find_users"];
  };
  "/users/{id}": {
    get: operations["find_user_by_id"];
  };
}

export interface components {
  schemas: {
    AuthBody: {
      /** @example david.bowie@gmail.com */
      clientId: string;
      /** @example Z1gGy.Pl4y3d!GuI74R */
      clientSecret: string;
    };
    AuthResponse: {
      accessToken: string;
      /** Format: int64 */
      expiresIn: number;
      refreshToken: string;
      /** Format: int64 */
      refreshTokenExpires: number;
      tokenType: string;
    };
    /** @enum {string} */
    Error: "NotFound" | "InternalError" | "InvalidToken" | "ValidationError";
    RegisterBody: {
      /** @example bark.ruffalo@gmail.com */
      email: string;
      /** @example Mark */
      firstName?: string;
      /** @example Ruffalo */
      lastName?: string;
      /** @example Sm4rT.HuLk */
      password: string;
    };
    RegisterResponse: {
      /** Format: date-time */
      createdAt: string;
      firstName: string;
      /** Format: uuid */
      id: string;
      lastName: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    RevalidateBody: {
      /** Format: uuid */
      refreshToken: string;
    };
    RevalidateResponse: {
      accessToken: string;
      /** Format: int64 */
      expiresIn: number;
      refreshToken: string;
      /** Format: int64 */
      refreshTokenExpires: number;
      tokenType: string;
    };
    UserResponse: {
      /** @example major.tom@gmail.com */
      email: string;
      /** @example David */
      firstName?: string;
      /**
       * Format: uuid
       * @example a00c9bc7-92ca-413a-97ec-66204314bbca
       */
      id: string;
      /** @example Bowie */
      lastName?: string;
    };
    UsersResponse: {
      /**
       * Format: date-time
       * @example 1665856394804
       */
      createdAt: string;
      /** @example major.tom@gmail.com */
      email: string;
      /** @example David */
      firstName?: string;
      /**
       * Format: uuid
       * @example Uuid::default()
       */
      id: string;
      /** @example Bowie */
      lastName?: string;
      /**
       * Format: date-time
       * @example 1664905980000
       */
      updatedAt?: string;
    };
  };
}

export interface operations {
  register: {
    responses: {
      /** Registration successful */
      200: {
        content: {
          "application/json": components["schemas"]["RegisterResponse"];
        };
      };
      /** Invalid refresh token */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterBody"];
      };
    };
  };
  authorize: {
    responses: {
      /** Authorization successful */
      200: {
        content: {
          "application/json": components["schemas"]["AuthResponse"];
        };
      };
      /** Validation error */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Invalid credentials */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthBody"];
      };
    };
  };
  revalidate: {
    responses: {
      /** Revalidation successful */
      200: {
        content: {
          "application/json": components["schemas"]["RevalidateResponse"];
        };
      };
      /** Invalid refresh token */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal server error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RevalidateBody"];
      };
    };
  };
  find_users: {
    responses: {
      /** List all users */
      200: {
        content: {
          "application/json": components["schemas"]["UsersResponse"][];
        };
      };
      /** Internal error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  find_user_by_id: {
    parameters: {
      path: {
        /** The user's id */
        id: string;
      };
    };
    responses: {
      /** Get a user */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** User not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
